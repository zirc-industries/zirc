name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Optional version string (e.g., v0.1.0). If empty, uses short SHA.'
        required: false
        default: ''

jobs:
  build-release:
    runs-on: windows-latest
    env:
      CARGO_TERM_COLOR: always
      VERSION_INPUT: ${{ github.event.inputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Rust fmt check
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Run tests
        run: cargo test --workspace --all-features --no-fail-fast

      - name: Build release binaries
        run: |
          cargo build -p zirc-cli --release
          cargo build -p zirc-cli --release --bin zirc-repl
          cargo build -p zirc-fmt --release

      - name: Prepare artifacts (zip with version/OS/arch)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist | Out-Null
          $version = ''
          if ("${{ github.event_name }}" -eq "push" -and "${{ github.ref }}".StartsWith("refs/tags/")) {
            $version = "${{ github.ref }}".Substring(10)
          } elseif ("${{ github.event_name }}" -eq "workflow_dispatch" -and "${{ github.event.inputs.version }}") {
            $version = "${{ github.event.inputs.version }}"
          } else {
            $version = "${{ github.sha }}".Substring(0,7)
          }
          $arch = if ("${{ runner.arch }}" -eq "X64") { "x86_64" } elseif ("${{ runner.arch }}" -eq "ARM64") { "aarch64" } else { "${{ runner.arch }}".ToLower() }
          $os = "windows"
          Copy-Item -Force "target/release/zirc-cli.exe" "dist/zirc-cli.exe"
          Copy-Item -Force "target/release/zirc-repl.exe" "dist/zirc-repl.exe"
          Copy-Item -Force "target/release/zirc-fmt.exe" "dist/zirc-fmt.exe"
          Compress-Archive -Path "dist/zirc-cli.exe" -DestinationPath "dist/zirc-cli-$version-$os-$arch.zip" -Force
          Compress-Archive -Path "dist/zirc-repl.exe" -DestinationPath "dist/zirc-repl-$version-$os-$arch.zip" -Force
          Compress-Archive -Path "dist/zirc-fmt.exe" -DestinationPath "dist/zirc-fmt-$version-$os-$arch.zip" -Force
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          "OS_LABEL=$os" | Out-File -FilePath $env:GITHUB_ENV -Append
          "ARCH_LABEL=$arch" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zirc-${{ env.VERSION }}-${{ env.OS_LABEL }}-${{ env.ARCH_LABEL }}
          path: |
            dist/zirc-cli-${{ env.VERSION }}-${{ env.OS_LABEL }}-${{ env.ARCH_LABEL }}.zip
            dist/zirc-repl-${{ env.VERSION }}-${{ env.OS_LABEL }}-${{ env.ARCH_LABEL }}.zip
            dist/zirc-fmt-${{ env.VERSION }}-${{ env.OS_LABEL }}-${{ env.ARCH_LABEL }}.zip

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/zirc-cli-${{ env.VERSION }}-${{ env.OS_LABEL }}-${{ env.ARCH_LABEL }}.zip
            dist/zirc-repl-${{ env.VERSION }}-${{ env.OS_LABEL }}-${{ env.ARCH_LABEL }}.zip
            dist/zirc-fmt-${{ env.VERSION }}-${{ env.OS_LABEL }}-${{ env.ARCH_LABEL }}.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
